///////////////////////////////////
int i;
i+=2;


class DontCreateMe private init ();

///////////////////////////////////
Object a;
if(a is Object && a !is String ){
}

///////////////////////////////////
class User(String name,String age){
    fun copy(name: String = this.name, age: Int = this.age) = User(name, age)
}
val jack = User(name = "Jack", age = 1)
val olderJack = jack.copy(age = 2)

///////////////////////////////////

package net.thevpc.hadralang.test:test05;
/**
 * tested :
 *   test precompiler expressions (this:varName,this:lineNumber,...)
 */
String myVar=static.varName+static.lineNumber+"/"+static.class+"::"+static.filePath;
String currentClassName=static.class.getName();
Logger LOG=Logger.getLogger(this:className);

fun void myMethod(){
    Method method=static.method;//MyClass.getDeclaredMethod("myMEthod");
    Object a="Hello";
    car c=a.?charAt(5);
    String methodName=static.methodName;
    String filePath=static.filePath;
    String fileName=static.fileName;
    println("we are calling "+methodName+" at from line "+static.lineNumber);
}

///////////////////////////////////
package net.thevpc.hadralang.test:test05;
/**
 * tested :
 *   * Logging framework
 *
 * you do not need to declare logger. If you use it, it will be instatianted.
 * It defaults to java logging framework.
 * Other frameworks may be handled as well according to framework
 * using extension methods.
 */
fun void myMethod(){
    this:log(Level.INFO,"this is logger helper")
    this:log.warn("this is logger helper")
}


///////////////////////////////////
/**
 * Support for json format
 */
class A{
    int x;
    B b;
}
class B{
    int y;
    int z;
}

A a={x:1,{y:2,z:3}};


/////////////////////////////////// try expression
var name = (try? getCurrentUser())?.name ?? "Guest";
var name = (try getCurrentUser())?.name ?? "Guest";

/////////////////////////////////// Optional

Optional<String> n=try? foo();
String? n=try? foo();

/////////////////////////////////// null/nonnull
String! n="non null string";
String  s=null;
n=nonnull s;

int n=0;
Integer  s=null;
n=nonnull s;
n=try s;
