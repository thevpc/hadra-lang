package net.hl.compiler.stages.generators.java;

import java.lang.reflect.Modifier;
import java.util.*;

public class HJavaHelper {
    public static final String modifiersToString(int modifiers) {
        List<String> sb = new ArrayList<>();
        if (Modifier.isPublic(modifiers)) {
            sb.add("public");
        } else if (Modifier.isProtected(modifiers)) {
            sb.add("protected");
        } else if (Modifier.isPrivate(modifiers)) {
            sb.add("private");
        }
//        else{
//            sb.add("public");
//        }
        if (Modifier.isStatic(modifiers)) {
            sb.add("static");
        }
        if (Modifier.isAbstract(modifiers)) {
            sb.add("abstract");
        }
        if (Modifier.isFinal(modifiers)) {
            sb.add("final");
        }
        if (Modifier.isTransient(modifiers)) {
            sb.add("transient");
        }
        if (Modifier.isVolatile(modifiers)) {
            sb.add("volatile");
        }
        if (Modifier.isNative(modifiers)) {
            sb.add("native");
        }
        if (Modifier.isStrict(modifiers)) {
            sb.add("strict");
        }
        return String.join(" ", sb);
    }

    public static String commentsCartridge(Collection<String> sources) {
        StringBuilder sb=new StringBuilder("/***********************************************************************\n" +
                " * This File was generated by HL (Hadra Language Compiler) from :\n" );
        for (String source : sources) {
            sb.append(" *   ").append(source).append("\n");
        }
        sb.append(" * DO NOT EDIT THIS FILE...\n" +
                " ***********************************************************************/\n"
        );
        return sb.toString();
    }

    public static String validateClassName(String ss) {
        int i1 = ss.lastIndexOf('/');
        int i2 = ss.lastIndexOf('\\');
        int i = Math.max(i1, i2);
        if (i >= 0) {
            ss = ss.substring(i + 1);
        }
        i = ss.indexOf('?');
        if (i >= 0) {
            ss = ss.substring(0, i);
        }
        i = ss.indexOf('.');
        if (i >= 0) {
            ss = ss.substring(0, i);
        }
        char[] cc = ss.toCharArray();
        for (int j = 0; j < cc.length; j++) {
            char c = cc[j];
            if (!Character.isLetterOrDigit(c) && c != '_') {
                cc[j] = '_';
            }
        }
        if (cc.length == 0) {
            ss = "program";
        } else if (Character.isDigit(cc[0])) {
            ss = "h" + new String(cc);
        } else {
            ss = new String(cc);
        }
        String name = ss;

        if (name == null) {
            name = "program";
        }
        HashSet<String> reservedNames = new HashSet<>(Arrays.asList(
                "int", "long", "short", "byte", "char", "boolean", "bool", "string", "object", "file", "system", "if", "then"
                , "else", "switch", "case", "break", "new", "end", "package", "public", "private", "protected", "static",
                "final", "const", "val", "var", "def", "fun", "function", "class", "type", "field", "method", "enum",
                "annotation", "test", "null", "string", "date", "time", "timestamp"
        ));
        if (reservedNames.contains(name.toLowerCase())) {
            name = "global_" + name;
        }
        return name;
    }

}
