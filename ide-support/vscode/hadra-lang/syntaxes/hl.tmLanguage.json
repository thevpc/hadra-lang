{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"information_for_contributors": [
		"This file has been inspired by https://raw.githubusercontent.com/microsoft/vscode/master/extensions/java/syntaxes/java.tmLanguage.json"
	],
	"version": "https://github.com/atom/language-hl/commit/2e179ceac423403eb5bf0eff26884093c3edba6f",
	"name": "hadra-lang",
	"scopeName": "source.hl",
	"patterns": [
		{
			"include": "#comments-javadoc"
		},
		{
			"include": "#code"
		},
		{
			"include": "#module"
		}
	],
	"repository": {
		"all-types": {
			"patterns": [
				{
					"include": "#primitive-arrays"
				},
				{
					"include": "#primitive-types"
				},
				{
					"include": "#object-types"
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"begin": "((@)\\s*([^\\s(]+))(\\()",
					"beginCaptures": {
						"2": {
							"name": "punctuation.definition.annotation.hl"
						},
						"3": {
							"name": "storage.type.annotation.hl"
						},
						"4": {
							"name": "punctuation.definition.annotation-arguments.begin.bracket.round.hl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.annotation-arguments.end.bracket.round.hl"
						}
					},
					"name": "meta.declaration.annotation.hl",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "constant.other.key.hl"
								},
								"2": {
									"name": "keyword.operator.assignment.hl"
								}
							},
							"match": "(\\w*)\\s*(=)"
						},
						{
							"include": "#code"
						}
					]
				},
				{
					"match": "(@)(interface)\\s+(\\w*)|((@)\\s*(\\w+))",
					"name": "meta.declaration.annotation.hl",
					"captures": {
						"1": {
							"name": "punctuation.definition.annotation.hl"
						},
						"2": {
							"name": "storage.modifier.hl"
						},
						"3": {
							"name": "storage.type.annotation.hl"
						},
						"5": {
							"name": "punctuation.definition.annotation.hl"
						},
						"6": {
							"name": "storage.type.annotation.hl"
						}
					}
				}
			]
		},
		"anonymous-block-and-instance-initializer": {
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.block.begin.bracket.curly.hl"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.block.end.bracket.curly.hl"
				}
			},
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"anonymous-classes-and-new": {
			"begin": "\\bnew\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.new.hl"
				}
			},
			"end": "(?=;|\\)|\\]|\\.|,|\\?|:|}|\\+|\\-|\\*|\\/(?!\\/|\\*)|%|!|&|\\||\\^|=)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#all-types"
				},
				{
					"begin": "(?<=\\))",
					"end": "(?=;|\\)|\\]|\\.|,|\\?|:|}|\\+|\\-|\\*|\\/(?!\\/|\\*)|%|!|&|\\||\\^|=)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.inner-class.begin.bracket.curly.hl"
								}
							},
							"end": "}",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.inner-class.end.bracket.curly.hl"
								}
							},
							"name": "meta.inner-class.hl",
							"patterns": [
								{
									"include": "#class-body"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=\\])",
					"end": "(?=;|\\)|\\]|\\.|,|\\?|:|}|\\+|\\-|\\*|\\/(?!\\/|\\*)|%|!|&|\\||\\^|=)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.array-initializer.begin.bracket.curly.hl"
								}
							},
							"end": "}",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.array-initializer.end.bracket.curly.hl"
								}
							},
							"name": "meta.array-initializer.hl",
							"patterns": [
								{
									"include": "#code"
								}
							]
						}
					]
				},
				{
					"include": "#parens"
				}
			]
		},
		"assertions": {
			"patterns": [
				{
					"begin": "\\b(assert)\\s",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.assert.hl"
						}
					},
					"end": "$",
					"name": "meta.declaration.assertion.hl",
					"patterns": [
						{
							"match": ":",
							"name": "keyword.operator.assert.expression-separator.hl"
						},
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"class": {
			"begin": "(?=\\w?[\\w\\s]*\\b(?:class|(?<!@)interface|enum)\\s+[\\w$]+)",
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.end.bracket.curly.hl"
				}
			},
			"name": "meta.class.hl",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#comments"
				},
				{
					"captures": {
						"1": {
							"name": "storage.modifier.hl"
						},
						"2": {
							"name": "entity.name.type.class.hl"
						}
					},
					"match": "(class|(?<!@)interface|enum)\\s+([\\w$]+)",
					"name": "meta.class.identifier.hl"
				},
				{
					"begin": "extends",
					"beginCaptures": {
						"0": {
							"name": "storage.modifier.extends.hl"
						}
					},
					"end": "(?={|implements)",
					"name": "meta.definition.class.inherited.classes.hl",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "(implements)\\s",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.hl"
						}
					},
					"end": "(?=\\s*extends|\\{)",
					"name": "meta.definition.class.implemented.interfaces.hl",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.class.begin.bracket.curly.hl"
						}
					},
					"end": "(?=})",
					"contentName": "meta.class.body.hl",
					"patterns": [
						{
							"include": "#class-body"
						}
					]
				}
			]
		},
		"class-body": {
			"patterns": [
				{
					"include": "#comments-javadoc"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#enums"
				},
				{
					"include": "#class"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#static-initializer"
				},
				{
					"include": "#class-fields-and-methods"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#member-variables"
				},
				{
					"include": "#code"
				}
			]
		},
		"class-fields-and-methods": {
			"patterns": [
				{
					"begin": "(?=\\=)",
					"end": "(?=;)",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"include": "#methods"
				}
			]
		},
		"code": {
			"patterns": [
				{
					"include": "#annotations"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#enums"
				},
				{
					"include": "#class"
				},
				{
					"include": "#record"
				},
				{
					"include": "#anonymous-block-and-instance-initializer"
				},
				{
					"include": "#try-catch-finally"
				},
				{
					"include": "#assertions"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#constants-and-special-vars"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#anonymous-classes-and-new"
				},
				{
					"include": "#lambda-expression"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#variables-local"
				},
				{
					"include": "#objects"
				},
				{
					"include": "#properties"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#all-types"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.hl"
				},
				{
					"match": "\\.",
					"name": "punctuation.separator.period.hl"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.hl"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.hl"
						}
					},
					"match": "/\\*\\*/",
					"name": "comment.block.empty.hl"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.hl"
						}
					},
					"end": "\\*/",
					"name": "comment.block.hl"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.hl"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.hl"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.hl"
						}
					]
				}
			]
		},
		"comments-javadoc": {
			"patterns": [
				{
					"begin": "^\\s*(/\\*\\*)(?!/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.hl"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.hl"
						}
					},
					"name": "comment.block.hldoc.hl",
					"patterns": [
						{
							"match": "@(author|deprecated|return|see|serial|since|version)\\b",
							"name": "keyword.other.documentation.hldoc.hl"
						},
						{
							"match": "(@param)\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.hldoc.hl"
								},
								"2": {
									"name": "variable.parameter.hl"
								}
							}
						},
						{
							"match": "(@(?:exception|throws))\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.hldoc.hl"
								},
								"2": {
									"name": "entity.name.type.class.hl"
								}
							}
						},
						{
							"match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*?}",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.hldoc.hl"
								},
								"2": {
									"name": "entity.name.type.class.hl"
								},
								"3": {
									"name": "variable.parameter.hl"
								}
							}
						}
					]
				}
			]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.language.hl"
				},
				{
					"match": "\\bthis\\b",
					"name": "variable.language.this.hl"
				},
				{
					"match": "\\bsuper\\b",
					"name": "variable.language.hl"
				}
			]
		},
		"enums": {
			"begin": "^\\s*([\\w\\s]*)(enum)\\s+(\\w+)",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#storage-modifiers"
						}
					]
				},
				"2": {
					"name": "storage.modifier.hl"
				},
				"3": {
					"name": "entity.name.type.enum.hl"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.enum.end.bracket.curly.hl"
				}
			},
			"name": "meta.enum.hl",
			"patterns": [
				{
					"begin": "\\b(extends)\\b",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.extends.hl"
						}
					},
					"end": "(?={|\\bimplements\\b)",
					"name": "meta.definition.class.inherited.classes.hl",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "\\b(implements)\\b",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.hl"
						}
					},
					"end": "(?={|\\bextends\\b)",
					"name": "meta.definition.class.implemented.interfaces.hl",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.enum.begin.bracket.curly.hl"
						}
					},
					"end": "(?=})",
					"patterns": [
						{
							"begin": "(?<={)",
							"end": "(?=;|})",
							"patterns": [
								{
									"include": "#comments-hldoc"
								},
								{
									"include": "#comments"
								},
								{
									"begin": "\\b(\\w+)\\b",
									"beginCaptures": {
										"1": {
											"name": "constant.other.enum.hl"
										}
									},
									"end": "(,)|(?=;|})",
									"endCaptures": {
										"1": {
											"name": "punctuation.separator.delimiter.hl"
										}
									},
									"patterns": [
										{
											"include": "#comments-hldoc"
										},
										{
											"include": "#comments"
										},
										{
											"begin": "\\(",
											"beginCaptures": {
												"0": {
													"name": "punctuation.bracket.round.hl"
												}
											},
											"end": "\\)",
											"endCaptures": {
												"0": {
													"name": "punctuation.bracket.round.hl"
												}
											},
											"patterns": [
												{
													"include": "#code"
												}
											]
										},
										{
											"begin": "{",
											"beginCaptures": {
												"0": {
													"name": "punctuation.bracket.curly.hl"
												}
											},
											"end": "}",
											"endCaptures": {
												"0": {
													"name": "punctuation.bracket.curly.hl"
												}
											},
											"patterns": [
												{
													"include": "#class-body"
												}
											]
										}
									]
								}
							]
						},
						{
							"include": "#class-body"
						}
					]
				}
			]
		},
		"function-call": {
			"begin": "([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.hl"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.bracket.round.hl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.hl"
				}
			},
			"name": "meta.function-call.hl",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"generics": {
			"begin": "<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.angle.hl"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.angle.hl"
				}
			},
			"patterns": [
				{
					"match": "\\b(extends|super)\\b",
					"name": "storage.modifier.$1.hl"
				},
				{
					"match": "(?<!\\.)([a-zA-Z$_][a-zA-Z0-9$_]*)(?=\\s*<)",
					"captures": {
						"1": {
							"name": "storage.type.hl"
						}
					}
				},
				{
					"include": "#primitive-arrays"
				},
				{
					"match": "[a-zA-Z$_][a-zA-Z0-9$_]*",
					"name": "storage.type.generic.hl"
				},
				{
					"match": "\\?",
					"name": "storage.type.generic.wildcard.hl"
				},
				{
					"match": "&",
					"name": "punctuation.separator.types.hl"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.hl"
				},
				{
					"match": "\\.",
					"name": "punctuation.separator.period.hl"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#comments"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\bthrow\\b",
					"name": "keyword.control.throw.hl"
				},
				{
					"match": "\\?|:",
					"name": "keyword.control.ternary.hl"
				},
				{
					"match": "\\b(return|break|case|continue|default|do|while|for|switch|if|else)\\b",
					"name": "keyword.control.hl"
				},
				{
					"match": "\\b(def)\\b",
					"name": "keyword.control.def.hl"
				},
				{
					"match": "\\b(fun)\\b",
					"name": "keyword.control.fun.hl"
				},
				{
					"match": "\\b(constructor)\\b",
					"name": "keyword.control.constructor.hl"
				},
				{
					"match": "\\b(import)\\b",
					"name": "keyword.control.import.hl"
				},
				{
					"match": "\\b(package)\\b",
					"name": "keyword.control.package.hl"
				},
				{
					"match": "\\b(operator)\\b",
					"name": "keyword.control.operator.hl"
				},
				{
					"match": "\\b(instanceof)\\b",
					"name": "keyword.operator.instanceof.hl"
				},
				{
					"match": "\\b(is)\\b",
					"name": "keyword.operator.is.hl"
				},
				{
					"match": "(<<|>>>?|~|\\^)",
					"name": "keyword.operator.bitwise.hl"
				},
				{
					"match": "((&|\\^|\\||<<|>>>?)=)",
					"name": "keyword.operator.assignment.bitwise.hl"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.hl"
				},
				{
					"match": "([+*/%-]=)",
					"name": "keyword.operator.assignment.arithmetic.hl"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment.hl"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.hl"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.hl"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.hl"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.hl"
				},
				{
					"match": "\\b(const|goto)\\b",
					"name": "keyword.reserved.hl"
				}
			]
		},
		"lambda-expression": {
			"patterns": [
				{
					"match": "->",
					"name": "storage.type.function.arrow.hl"
				}
			]
		},
		"member-variables": {
			"begin": "(?=private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)",
			"end": "(?=\\=|;)",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#primitive-arrays"
				},
				{
					"include": "#object-types"
				}
			]
		},
		"method-call": {
			"begin": "(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.hl"
				},
				"2": {
					"name": "entity.name.function.hl"
				},
				"3": {
					"name": "punctuation.definition.parameters.begin.bracket.round.hl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.hl"
				}
			},
			"name": "meta.method-call.hl",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"methods": {
			"begin": "(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()",
			"end": "(})|(?=;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.method.end.bracket.curly.hl"
				}
			},
			"name": "meta.method.hl",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"begin": "(\\w+)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.hl"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.bracket.round.hl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.hl"
						}
					},
					"name": "meta.method.identifier.hl",
					"patterns": [
						{
							"include": "#parameters"
						},
						{
							"include": "#parens"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"include": "#generics"
				},
				{
					"begin": "(?=\\w.*\\s+\\w+\\s*\\()",
					"end": "(?=\\s+\\w+\\s*\\()",
					"name": "meta.method.return-type.hl",
					"patterns": [
						{
							"include": "#all-types"
						},
						{
							"include": "#parens"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"include": "#throws"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.method.begin.bracket.curly.hl"
						}
					},
					"end": "(?=})",
					"contentName": "meta.method.body.hl",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"include": "#comments"
				}
			]
		},
		"module": {
			"begin": "((open)\\s)?(module)\\s+(\\w+)",
			"end": "}",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.hl"
				},
				"3": {
					"name": "storage.modifier.hl"
				},
				"4": {
					"name": "entity.name.type.module.hl"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.module.end.bracket.curly.hl"
				}
			},
			"name": "meta.module.hl",
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.module.begin.bracket.curly.hl"
						}
					},
					"end": "(?=})",
					"contentName": "meta.module.body.hl",
					"patterns": [
						{
							"match": "\\b(requires|transitive|exports|opens|to|uses|provides|with)\\b",
							"name": "keyword.module.hl"
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.hl"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.hl"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.hl"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.hl"
				}
			]
		},
		"object-types": {
			"patterns": [
				{
					"include": "#generics"
				},
				{
					"begin": "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*)([A-Z_]\\w*)\\s*(?=\\[)",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "[A-Za-z_]\\w*",
									"name": "storage.type.hl"
								},
								{
									"match": "\\.",
									"name": "punctuation.separator.period.hl"
								}
							]
						},
						"2": {
							"name": "storage.type.object.array.hl"
						}
					},
					"end": "(?!\\s*\\[)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#parens"
						}
					]
				},
				{
					"match": "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*[A-Z_]\\w*)\\s*(?=<)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "[A-Za-z_]\\w*",
									"name": "storage.type.hl"
								},
								{
									"match": "\\.",
									"name": "punctuation.separator.period.hl"
								}
							]
						}
					}
				},
				{
					"match": "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*[A-Z_]\\w*)\\b((?=\\s*[A-Za-z$_\\n])|(?=\\s*\\.\\.\\.))",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "[A-Za-z_]\\w*",
									"name": "storage.type.hl"
								},
								{
									"match": "\\.",
									"name": "punctuation.separator.period.hl"
								}
							]
						}
					}
				}
			]
		},
		"object-types-inherited": {
			"patterns": [
				{
					"include": "#generics"
				},
				{
					"match": "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b",
					"name": "entity.other.inherited-class.hl",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.hl"
						}
					}
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.hl"
				}
			]
		},
		"objects": {
			"match": "(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)",
			"name": "variable.other.object.hl"
		},
		"parameters": {
			"patterns": [
				{
					"match": "\\bfinal\\b",
					"name": "storage.modifier.hl"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "#all-types"
				},
				{
					"include": "#strings"
				},
				{
					"match": "\\w+",
					"name": "variable.parameter.hl"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.hl"
				},
				{
					"match": "\\.\\.\\.",
					"name": "punctuation.definition.parameters.varargs.hl"
				}
			]
		},
		"parens": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.round.hl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.round.hl"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.square.hl"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.square.hl"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.hl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.hl"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"primitive-arrays": {
			"patterns": [
				{
					"begin": "\\b(void|boolean|byte|char|short|int|float|long|double)\\b\\s*(?=\\[)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.primitive.array.hl"
						}
					},
					"end": "(?!\\s*\\[)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#parens"
						}
					]
				}
			]
		},
		"primitive-types": {
			"match": "\\b(void|boolean|byte|char|short|int|float|long|double)\\b",
			"name": "storage.type.primitive.hl"
		},
		"properties": {
			"patterns": [
				{
					"match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.hl"
						},
						"2": {
							"name": "variable.other.object.property.hl"
						}
					}
				},
				{
					"match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.hl"
						},
						"2": {
							"name": "variable.other.object.property.hl"
						}
					}
				},
				{
					"match": "(\\.)\\s*([0-9][\\w$]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.period.hl"
						},
						"2": {
							"name": "invalid.illegal.identifier.hl"
						}
					}
				}
			]
		},
		"record": {
			"begin": "(?=\\w?[\\w\\s]*\\b(?:record)\\s+[\\w$]+)",
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.end.bracket.curly.hl"
				}
			},
			"name": "meta.record.hl",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#comments"
				},
				{
					"begin": "(record)\\s+([\\w$]+)(<[\\w$]+>)?(\\()",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.hl"
						},
						"2": {
							"name": "entity.name.type.record.hl"
						},
						"3": {
							"patterns": [
								{
									"include": "#generics"
								}
							]
						},
						"4": {
							"name": "punctuation.definition.parameters.begin.bracket.round.hl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.hl"
						}
					},
					"name": "meta.record.identifier.hl",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "(implements)\\s",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.hl"
						}
					},
					"end": "(?=\\s*\\{)",
					"name": "meta.definition.class.implemented.interfaces.hl",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"include": "#record-body"
				}
			]
		},
		"record-body": {
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.class.begin.bracket.curly.hl"
				}
			},
			"end": "(?=})",
			"name": "meta.record.body.hl",
			"patterns": [
				{
					"include": "#record-constructor"
				},
				{
					"include": "#class-body"
				}
			]
		},
		"record-constructor": {
			"begin": "(?!new)(?=[\\w<].*\\s+)(?=([^\\(=/]|/(?!/))+(?={))",
			"end": "(})|(?=;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.method.end.bracket.curly.hl"
				}
			},
			"name": "meta.method.hl",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"begin": "(\\w+)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.hl"
						}
					},
					"end": "(?=\\s*{)",
					"name": "meta.method.identifier.hl",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.method.begin.bracket.curly.hl"
						}
					},
					"end": "(?=})",
					"contentName": "meta.method.body.hl",
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"static-initializer": {
			"patterns": [
				{
					"include": "#anonymous-block-and-instance-initializer"
				},
				{
					"match": "static",
					"name": "storage.modifier.hl"
				}
			]
		},
		"storage-modifiers": {
			"match": "\\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|volatile|default|strictfp)\\b",
			"name": "storage.modifier.hl"
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.hl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.hl"
						}
					},
					"name": "string.quoted.double.hl",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.hl"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.hl"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.hl"
						}
					},
					"name": "string.quoted.single.hl",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.hl"
						}
					]
				}
			]
		},
		"throws": {
			"begin": "throws",
			"beginCaptures": {
				"0": {
					"name": "storage.modifier.hl"
				}
			},
			"end": "(?={|;)",
			"name": "meta.throwables.hl",
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.hl"
				},
				{
					"match": "[a-zA-Z$_][\\.a-zA-Z0-9$_]*",
					"name": "storage.type.hl"
				}
			]
		},
		"try-catch-finally": {
			"patterns": [
				{
					"begin": "\\btry\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.try.hl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.try.end.bracket.curly.hl"
						}
					},
					"name": "meta.try.hl",
					"patterns": [
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.try.resources.begin.bracket.round.hl"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.try.resources.end.bracket.round.hl"
								}
							},
							"name": "meta.try.resources.hl",
							"patterns": [
								{
									"include": "#code"
								}
							]
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.try.begin.bracket.curly.hl"
								}
							},
							"end": "(?=})",
							"contentName": "meta.try.body.hl",
							"patterns": [
								{
									"include": "#code"
								}
							]
						}
					]
				},
				{
					"begin": "\\b(catch)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.catch.hl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.catch.end.bracket.curly.hl"
						}
					},
					"name": "meta.catch.hl",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.parameters.begin.bracket.round.hl"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.parameters.end.bracket.round.hl"
								}
							},
							"contentName": "meta.catch.parameters.hl",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#storage-modifiers"
								},
								{
									"begin": "[a-zA-Z$_][\\.a-zA-Z0-9$_]*",
									"beginCaptures": {
										"0": {
											"name": "storage.type.hl"
										}
									},
									"end": "(\\|)|(?=\\))",
									"endCaptures": {
										"1": {
											"name": "punctuation.catch.separator.hl"
										}
									},
									"patterns": [
										{
											"include": "#comments"
										},
										{
											"match": "\\w+",
											"captures": {
												"0": {
													"name": "variable.parameter.hl"
												}
											}
										}
									]
								}
							]
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.catch.begin.bracket.curly.hl"
								}
							},
							"end": "(?=})",
							"contentName": "meta.catch.body.hl",
							"patterns": [
								{
									"include": "#code"
								}
							]
						}
					]
				},
				{
					"begin": "\\bfinally\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.finally.hl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.finally.end.bracket.curly.hl"
						}
					},
					"name": "meta.finally.hl",
					"patterns": [
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.finally.begin.bracket.curly.hl"
								}
							},
							"end": "(?=})",
							"contentName": "meta.finally.body.hl",
							"patterns": [
								{
									"include": "#code"
								}
							]
						}
					]
				}
			]
		},
		"variables": {
			"begin": "(?x)\n(?=\n  (\n    \\b(void|boolean|byte|char|short|int|float|long|double)\\b\n    |\n    (?>(\\w+\\.)*[A-Z_]+\\w*) # e.g. `javax.ws.rs.Response`, or `String`\n  )\n  \\s*\n  (\n    <[\\w<>,\\.?\\s\\[\\]]*> # e.g. `HashMap<Integer, String>`, or `List<java.lang.String>`\n  )?\n  \\s*\n  (\n    (\\[\\])* # int[][]\n  )?\n  \\s+\n  [A-Za-z_$][\\w$]* # At least one identifier after space\n  ([\\w\\[\\],$][\\w\\[\\],\\s]*)? # possibly primitive array or additional identifiers\n  \\s*(=|:|;)\n)",
			"end": "(?=\\=|:|;)",
			"name": "meta.definition.variable.hl",
			"patterns": [
				{
					"match": "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(;|:|=|,))",
					"captures": {
						"1": {
							"name": "variable.other.definition.hl"
						}
					}
				},
				{
					"include": "#all-types"
				},
				{
					"include": "#code"
				}
			]
		},
		"variables-local": {
			"begin": "(?=\\b(var)\\b\\s+[A-Za-z_$][\\w$]*\\s*(=|:|;))",
			"end": "(?=\\=|:|;)",
			"name": "meta.definition.variable.local.hl",
			"patterns": [
				{
					"match": "\\bvar\\b",
					"name": "storage.type.local.hl"
				},
				{
					"match": "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(=|:|;))",
					"captures": {
						"1": {
							"name": "variable.other.definition.hl"
						}
					}
				},
				{
					"include": "#code"
				}
			]
		}
	}
}